/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nrlmsise00;

import java.util.Arrays;
import java.util.function.Function;

public class App {
    TSELEC tselec = new TSELEC();
    VTST7 vtst7 = new VTST7();
    GLATF glatf = new GLATF();
    GTS7 gts7 = new GTS7();
    GLOB7S glob7s = new GLOB7S();
    DENSM densm = new DENSM();
    GLOBE7 globe7 = new GLOBE7();

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }

    public void GTD7(
            int IYD,
            float SEC,
            float ALT,
            float GLAT,
            float GLONG,
            float STL,
            float F107A,
            float F107,
            float[] AP,
            int MASS,
            float[] D,
            float[] T) {
        int MN3 = 5;
        float[] ZN3 = new float[] { 32.5f, 20.0f, 15.0f, 10.0f, 0.0f };
        int MN2 = 4;
        float[] ZN2 = new float[] { 72.5f, 55.f, 45.f, 32.5f };
        float ZMIX = 62.5f;
        float ALAST = 99999f;
        int MSSL = -999;
        float[] SV = new float[25];
        Arrays.fill(SV, 1.f);
        float[] DS = new float[9];
        float[] TS = new float[2];
        float DM28M = 0;
        float TZ = 0;

        if (CommonCSW.ISW != 64999) {
            this.tselec.run(SV);
        }

        // put identification information into common/datetime
        for (int i = 0; i < 3; i++) {
            CommonDatime.ISDATE[i] = CommonDatim7.ISD[i];
        }
        // Continue 1
        for (int i = 0; i < 2; i++) {
            CommonDatime.ISTIME[i] = CommonDatim7.IST[i];
            CommonDatime.NAME[i] = CommonDatim7.NAM[i];
        }
        // Continue 2

        // Test for changed input
        int V1 = vtst7.run(IYD, SEC, GLAT, GLONG, STL, F107A, F107, AP, 1);

        // Latitude variation of gravity, none for SW[1]=0
        float XLAT = GLAT;
        if (CommonCSW.SW[1] == 0) {
            XLAT = 45;
        }

        glatf.run(XLAT, CommonPARMB.GSURF, CommonPARMB.RE);

        float XMM = CommonLOWER7.PDM[4][2];

        // Thermosphere/mesopshere above ZN2[0]
        float ALTT = Math.max(ALT, ZN2[0]);
        int MSS = MASS;

        // Only calculate N2 in thermosphere if alt in mixed region
        if (ALT < ZMIX && MASS > 0) {
            MSS = 28;
        }
        // Only calcculate thermosphere if input parameters changed or altitude above
        // ZN2[0] in mesosphere
        if (V1 == 1 || ALT > ZN2[0] || ALAST > ZN2[0] || MSS != MSSL) {
            gts7.run(IYD, SEC, ALTT, GLAT, GLONG, STL, F107A, F107, AP, MSS, DS, TS);
            DM28M = CommonDMIX.DM28;
            // metric adjustment
            if (CommonMetSel.IMR == 1) {
                DM28M = CommonDMIX.DM28 * 1e6f;
            }
            MSSL = MSS;
        }

        T[0] = TS[0];
        T[1] = TS[1];

        if (ALT >= ZN2[0]) {
            for (int i = 0; i < 9; i++) {
                D[i] = DS[i];
            }
        } else {
            if (V1 == 1 || ALAST >= ZN2[0]) {
                CommonMESO7.TGN2[0] = CommonMESO7.TGN1[1];
                CommonMESO7.TN2[0] = CommonMESO7.TN1[4];
                CommonMESO7.TN2[1] = CommonPARM7.PMA[0][0] * CommonMAVG7.PAVGM[0]
                        / (1f - CommonCSW.SW[19] * glob7s.run(CommonPARM7.PMA[0][0]));
                CommonMESO7.TN2[2] = CommonPARM7.PMA[0][1] * CommonMAVG7.PAVGM[1]
                        / (1f - CommonCSW.SW[19] * glob7s.run(CommonPARM7.PMA[0][1]));
                CommonMESO7.TN2[3] = CommonPARM7.PMA[0][2] * CommonMAVG7.PAVGM[2]
                        / (1f - CommonCSW.SW[19] * CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][2]));
                CommonMESO7.TGN2[1] = CommonMAVG7.PAVGM[8] * CommonPARM7.PMA[0][9]
                        * (1f * CommonCSW.SW[19] * CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][9]))
                        * CommonMESO7.TN2[3] * CommonMESO7.TN2[3]
                        / ((float) Math.pow(CommonPARM7.PMA[0][2] * CommonMAVG7.PAVGM[2], 2));
                CommonMESO7.TN3[0] = CommonMESO7.TN2[3];
            }
            if (!(ALT >= ZN3[0])) {
                if (V1 == 1 || ALAST >= ZN3[0]) {
                    CommonMESO7.TGN3[0] = CommonMESO7.TGN2[1];
                    CommonMESO7.TN3[1] = CommonPARM7.PMA[0][3] * CommonMAVG7.PAVGM[3]
                            / (1f - CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][0]));
                    CommonMESO7.TN3[2] = CommonPARM7.PMA[0][4] * CommonMAVG7.PAVGM[4]
                            / (1f - CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][0]));
                    CommonMESO7.TN3[3] = CommonPARM7.PMA[0][5] * CommonMAVG7.PAVGM[5]
                            / (1f - CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][1]));
                    CommonMESO7.TN3[4] = CommonPARM7.PMA[0][6] * CommonMAVG7.PAVGM[6]
                            / (1f - CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][2]));
                    CommonMESO7.TGN3[1] = CommonPARM7.PMA[0][7] * CommonMAVG7.PAVGM[8] * CommonPARM7.PMA[0][9]
                            * (1f * CommonCSW.SW[21] * glob7s.run(CommonPARM7.PMA[0][9]))
                            * CommonMESO7.TN3[4] * CommonMESO7.TN3[4]
                            / ((float) Math.pow(CommonPARM7.PMA[0][6] * CommonMAVG7.PAVGM[6], 2));
                }
            }
            if (MASS != 0) {
                float DMC = 0;
                if (ALT > ZMIX) {
                    DMC = 1 - (ZN2[0] - ALT) / (ZN2[0] - ZMIX);
                }
                float DZ28 = DS[2];
                float DMR = DS[2] / DM28M - 1;
                D[2] = densm.run(ALT, DM28M, XMM, TZ, MN3, ZN3, CommonMESO7.TN3, CommonMESO7.TGN3, MN2, ZN2,
                        CommonMESO7.TN2, CommonMESO7.TGN2);
                D[2] = D[2] * (1 + DMR * DMC);
                D[0] = 0;
                if (!(MASS != 4 && MASS != 48)) {
                    DMR = DS[0] / (DZ28 * CommonLOWER7.PDM[1][0]) - 1;
                    D[0] = D[2] * CommonLOWER7.PDM[1][0] * (1 + DMR * DMC);
                }
                D[1] = 0;
                D[8] = 0;
                D[3] = 0;
                if (!(MASS != 32 && MASS != 48)) {
                    DMR = DS[3] / (DZ28 * CommonLOWER7.PDM[1][3]) - 1;
                    D[3] = D[2] * CommonLOWER7.PDM[1][3] * (1 + DMR * DMC);
                }
                D[4] = 0;
                if (!(MASS != 40 && MASS != 48)) {
                    DMR = DS[4] / (DZ28 * CommonLOWER7.PDM[1][4]) - 1;
                    DS[4] = DS[2] * CommonLOWER7.PDM[1][4] * (1 + DMR * DMC);
                }
                D[6] = 0;
                D[7] = 0;
                if (MASS == 48) {
                    D[5] = 1.66E-24f
                            * (4.f * D[1] + 16.f * D[2] + 28.f * D[3] + 32.f * D[4] + 40.f * D[5] + D[7] + 14.f * D[8]);
                    if (CommonMetSel.IMR == 1) {
                        D[5] = D[5] / 1000f;
                    }
                }
                T[1] = TZ;
            } else {
                CommonGTS3C.DD = densm.run(ALT, 1f, 0, TZ, MN3, ZN3, CommonMESO7.TN3, CommonMESO7.TGN3, MN2, ZN2,
                        CommonMESO7.TN2, CommonMESO7.TGN2);
                T[1] = TZ;
            }
        }
        ALAST = ALT;
    }

    static class CommonCSW {
        // COMMON CSW block
        public static int ISW = 0;
        public static float[] SW = new float[25];
        public static float[] SWC = new float[25];
    }

    static class CommonDatim7 {
        public static int[] ISD = new int[3];
        public static int[] IST = new int[2];
        public static int[] NAM = new int[2];
    }

    static class CommonDatime {
        public static int[] ISDATE = new int[3];
        public static int[] ISTIME = new int[2];
        public static int[] NAME = new int[2];
    }

    static class CommonPARMB {
        public static float GSURF = 0;
        public static float RE = 0;
    }

    static class CommonLOWER7 {
        static float[] PTM = new float[10];
        static float[][] PDM = new float[10][8];
    }

    static class CommonMetSel {
        static int IMR;
    }

    static class CommonDMIX {
        static float DM04;
        static float DM16;
        static float DM28;
        static float DM32;
        static float DM40;
        static float DM01;
        static float DM14;
    }

    static class CommonMESO7 {
        static float[] TN1 = new float[5];
        static float[] TN2 = new float[4];
        static float[] TN3 = new float[5];
        static float[] TGN1 = new float[2];
        static float[] TGN2 = new float[2];
        static float[] TGN3 = new float[2];
    }

    static class CommonPARM7 {
        static float[] PT = new float[150];
        static float[][] PD = new float[150][9];
        static float[] PS = new float[150];
        static float[][] PDL = new float[25][2];
        static float[][] PTL = new float[100][4];
        static float[][] PMA = new float[100][1];
        static float[] SAM = new float[100];
    }

    static class CommonMAVG7 {
        static float[] PAVGM = new float[10];
    }

    static class CommonGTS3C {
        static float TLB;
        static float S;
        static float DB04;
        static float DB16;
        static float DB28;
        static float DB32;
        static float DB40;
        static float DB48;
        static float DB01;
        static float ZA;
        static float T0;
        static float Z0;
        static float G0;
        static float RL;
        static float DD;
        static float DB14;
        static float TR12;
    }

    static class CommonTTEST {
        static float TINFG;
        static float GB;
        static float ROUT;
        static float[] TT = new float[15];
    }

    static class CommonLPOLY {
        float[][] PLG = new float[9][4];
        float CTLOC;
        float STLOC;
        float C2TLOC;
        float S2TLOC;
        float C3TLOC;
        float S3TLOC;
        float IYR;
        float DAY;
        float DF;
        float DFA;
        float APD;
        float APDF;
        float[] APT = new float[4];
        float XLONG;
    }

    class DENSM {
        float run(float aLT, float dM28M, float xMM, float tZ, int mN3, float[] zN3, float[] tN3, float[] tGN3,
                int mN2,
                float[] zN2, float[] tN2, float[] tGN2) {
            throw new UnsupportedOperationException();
        }
    }

    class GLOB7S {
        float run(float P) {
            throw new UnsupportedOperationException();
        }
    }

    class GLOBE7 {
        float run(int YRD, float SEC, float LAT, float LONG, float TLOC, float F107A, float F107, float[] AP,
                float[] P) {
            float DGTR = 1.74533E-2f;
            float DR = 1.72142E-2f;
            float XL = 1000.f;
            float TLL = 1000.f;
            float SW9 = 1.f;
            float DAYL = -1.f;
            float P14 = -1000.f;
            float P18 = -1000.f;
            float P32 = -1000.f;
            float HR = .2618f;
            float SR = 7.2722E-5f;
            float[] SV = new float[25];
            Arrays.fill(SV, 1f);
            float NSW = 14f;
            float P39 = -1000.f;
            final Function<Float, Float> G0 = (A) -> (float) (A - 4.f
                    + (P[25] - 1.f) * (A - 4.f + (Math.exp(-Math.abs(P[24]) * (A - 4.f)) - 1.f) / Math.abs(P[24])));
            final Function<Float, Float> SUMEX = (
                    EX) -> (float) (1.f + (1.f - Math.pow(EX, 19)) / (1.f - EX) * Math.pow(EX, (.5f)));
            final Function<Float, Float> SG0 = (EX) -> (float) ((G0.apply(AP[1])
                    + (G0.apply(AP[2]) * EX + G0.apply(AP[3]) * EX * EX + G0.apply(AP[4]) * Math.pow(EX, 3)
                            + (G0.apply(AP[5]) * Math.pow(EX, 4) + G0.apply(AP[6]) * Math.pow(EX, 12))
                                    * (1. - Math.pow(EX, 8)) / (1. - EX)))
                    / SUMEX.apply(EX));
            
            if (CommonCSW.ISW != 64999) { tselec.run(SV); }
        }
    }

    class GTS7 {
        void run(
                int IYD,
                float SEC,
                float ALT,
                float GLAT,
                float GLONG,
                float STL,
                float F107A,
                float F107,
                float[] AP,
                int MASS,
                float[] D,
                float[] T) {
            // Common blocks
            // GTs3c, mes07, lower7, parm7, csw, ttest, dmix, metsel
            int[] MT = new int[] { 48, 0, 4, 16, 28, 32, 40, 1, 49, 14, 17 };
            float[] ALTL = new float[] { 200.f, 300.f, 160.f, 250.f, 240.f, 450.f, 320.f, 450.f };
            int MN1 = 5;
            float[] ZN1 = new float[] { 120.f, 110.f, 100.f, 90.f, 72.5f };
            float DGTR = 1.74533E-2f;
            float DR = 1.72142E-2f;
            float ALAST = -999f;
            float[] ALPHA = new float[] { -0.38f, 0.f, 0.f, 0.f, 0.17f, 0.f, -0.38f, 0.f, 0.f };

            int V2 = vtst7.run(IYD, SEC, GLAT, GLONG, STL, F107A, F107, AP, 2);

            int YRD = IYD;
            float ZA = CommonPARM7.PDL[15][1];
            ZN1[0] = ZA;
            for (int i = 0; i < 9; i++) {
                D[i] = 0;
            }

            float TINF = 0;
            if (ALT > ZN1[0]) {
                if (V2 == 1 || ALAST < ZN1[0]) {
                    TINF = CommonLOWER7.PTM[0] * CommonPARM7.PT[0] * (1.f + CommonCSW.SW[15]
                            * globe7.run(YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, CommonPARM7.PT));
                }
            } else {
                TINF = CommonLOWER7.PTM[0] * CommonPARM7.PT[0];
            }
            T[0] = TINF;

            float G0 = 0;
            if (ALT > ZN1[4]) {
                if (V2 == 1 || ALAST < ZN1[4]) {
                    G0 = CommonLOWER7.PTM[3] * CommonPARM7.PS[0] * (1.f + CommonCSW.SW[18]
                            * globe7.run(YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, CommonPARM7.PS));
                }
            } else {
                G0 = CommonLOWER7.PTM[3] * CommonPARM7.PS[0];
            }
            {
                if (V2 == 1 || ALAST < 300) {
                    CommonGTS3C.TLB = CommonLOWER7.PTM[1] * (1 + CommonCSW.SW[16]
                            * globe7.run(YRD, SEC, GLAT, GLONG, STL, F107A, F107, AP, CommonPARM7.PD[0][3]));
                }
            }

        }
    }

    class TSELEC {
        float[] SAV = new float[25];

        void run(float[] SV) {
            for (int i = 0; i < 25; i++) {
                SAV[i] = SV[i];
                CommonCSW.SW[i] = SV[i] % 2.0f;
                if (Math.abs(SV[i]) == 1 || Math.abs(SV[i]) == 2.0f) {
                    CommonCSW.SWC[i] = 1;
                } else {
                    CommonCSW.SWC[i] = 0;
                }
            }
            CommonCSW.ISW = 64999;
        }

        void get_Values(float[] SVV) {
            for (int i = 0; i < 25; i++) {
                SVV[i] = SAV[i];
            }
        }
    }

    class VTST7 {
        int[] IYDL = new int[] { -999, -999 };
        float[] SECL = new float[] { -999, -999 };
        float[] GLATL = new float[] { -999, -999 };
        float[] GLL = new float[] { -999, -999 };
        float[] STLL = new float[] { -999, -999 };
        float[] FAL = new float[] { -999, -999 };
        float[] FL = new float[] { -999, -999 };
        float[][] APL = new float[2][7];
        float[][] SWL = new float[2][25];
        float[][] SWCL = new float[2][25];

        VTST7() {
            Arrays.fill(APL[0], -999);
            Arrays.fill(SWL[0], -999);
            Arrays.fill(SWCL[0], -999);
            Arrays.fill(APL[1], -999);
            Arrays.fill(SWL[1], -999);
            Arrays.fill(SWCL[1], -999);
        }

        /**
         * Checks if inputs have changed, maybe some sort of caching?
         * 
         * @param IYD
         * @param SEC
         * @param GLAT
         * @param GLONG
         * @param STL
         * @param F107A
         * @param F107
         * @param AP
         * @param IC
         */
        int run(
                int IYD,
                float SEC,
                float GLAT,
                float GLONG,
                float STL,
                float F107A,
                float F107,
                float[] AP, // length 7
                int IC) {

            boolean changed = false;
            if (IYD != IYDL[IC - 1]) {
                changed = true;
                IYDL[IC - 1] = IYD;
            }
            if (SEC != SECL[IC - 1]) {
                changed = true;
                SECL[IC - 1] = SEC;
            }
            if (GLAT != GLATL[IC - 1]) {
                changed = true;
                GLATL[IC - 1] = GLAT;
            }
            if (GLONG != GLL[IC - 1]) {
                changed = true;
                GLL[IC - 1] = GLONG;
            }
            if (STL != STLL[IC - 1]) {
                changed = true;
                STLL[IC - 1] = STL;
            }
            if (F107A != FAL[IC - 1]) {
                changed = true;
                FAL[IC - 1] = F107A;
            }
            if (F107 != FL[IC - 1]) {
                changed = true;
                FL[IC - 1] = F107;
            }
            for (int i = 0; i < 7; i++) {
                if (APL[IC - 1][i] != AP[i]) {
                    changed = true;
                    APL[IC - 1][i] = AP[i];
                }
            }
            for (int i = 0; i < 25; i++) {
                if (SWL[IC - 1][i] != CommonCSW.SW[i]) {
                    changed = true;
                    SWL[IC - 1][i] = CommonCSW.SW[i];
                }
                if (SWCL[IC - 1][i] != CommonCSW.SWC[i]) {
                    changed = true;
                    SWCL[IC - 1][i] = CommonCSW.SWC[i];
                }
            }
            return changed ? 1 : 0;
        }

    }

    class GLATF {
        float DGTR = 1.74533e-2f;

        /**
         * Calculate latitude, variable gravity and effective radius
         * 
         * @param LAT
         * @param gSURF
         * @param rE
         */
        void run(float LAT, float GV, float REFF) {
            float C2 = (float) Math.cos(2f * DGTR * LAT);
            GV = 980.616f * (1f - 0.0026373f * C2);
            REFF = 2f * GV / (3.085462e-6f + 2.27e-9f * C2);
        }

    }
}
