/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nrlmsise00;

import java.lang.reflect.Array;
import java.util.Arrays;

public class App {
    TSELEC tselec = new TSELEC();
    VTST7 vtst7 = new VTST7();
    GLATF glatf = new GLATF();

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }

    public void GTD7(
            int IYD,
            float SEC,
            float ALT,
            float GLAT,
            float GLONG,
            float STL,
            float F107A,
            float F107,
            float[] AP,
            int MASS,
            Object D,
            Object T) {
        int MN3 = 5;
        float[] ZN3 = new float[] { 32.5f, 20.0f, 15.0f, 10.0f, 0.0f };
        int MN2 = 4;
        float[] ZN2 = new float[] { 72.5f, 55.f, 45.f, 32.5f };
        float ZMIX = 62.5f;
        float ALAST = 99999f;
        int MSSL = -999;
        float[] SV = new float[25];
        Arrays.fill(SV, 1.f);
        if (CommonCSW.ISW != 64999) {
            this.tselec.run(SV);
        }
        for (int i = 0; i < 3; i++) {
            CommonDatime.ISDATE[i] = CommonDatim7.ISD[i];
        }
        for (int i = 0; i < 2; i++) {
            CommonDatime.ISTIME[i] = CommonDatim7.IST[i];
            CommonDatime.NAME[i] = CommonDatim7.NAM[i];
        }

        int V1 = vtst7.run(IYD, SEC, GLAT, GLONG, STL, F107A, F107, AP, 1);
        float XLAT = GLAT;
        if (CommonCSW.SW[1] == 0) {
            XLAT = 45;
        }

        glatf.run(XLAT, CommonPARMB.GSURF, CommonPARMB.RE);

        float XMM = CommonLOWER7.PDM[4][2];

        float ALTT = Math.max(ALT, ZN2[0]);
        int MSS = MASS;

        if (ALT < ZMIX && MASS > 0) {MSS = 28;}
        if(V1 == 1 || ALT > ZN2[0] || ALAST > ZN2[0] || MSS != MSSL){
            
        }
    }

    static class CommonCSW {
        // COMMON CSW block
        public static int ISW = 0;
        public static float[] SW = new float[25];
        public static float[] SWC = new float[25];
    }

    static class CommonDatim7 {
        public static int[] ISD = new int[3];
        public static int[] IST = new int[2];
        public static int[] NAM = new int[2];
    }

    static class CommonDatime {
        public static int[] ISDATE = new int[3];
        public static int[] ISTIME = new int[2];
        public static int[] NAME = new int[2];
    }

    static class CommonPARMB {
        public static float GSURF = 0;
        public static float RE = 0;
    }

    static class CommonLOWER7 {
        static float[] PTM = new float[10];
        public static float[][] PDM = new float[10][8];

    }

    class TSELEC {
        float[] SAV = new float[25];

        void run(float[] SV) {
            for (int i = 0; i < 25; i++) {
                SAV[i] = SV[i];
                CommonCSW.SW[i] = SV[i] % 2.0f;
                if (Math.abs(SV[i]) == 1 || Math.abs(SV[i]) == 2.0f) {
                    CommonCSW.SWC[i] = 1;
                } else {
                    CommonCSW.SWC[i] = 0;
                }
            }
            CommonCSW.ISW = 64999;
        }

        void get_Values(float[] SVV) {
            for (int i = 0; i < 25; i++) {
                SVV[i] = SAV[i];
            }
        }
    }

    class VTST7 {
        int[] IYDL = new int[] { -999, -999 };
        float[] SECL = new float[] { -999, -999 };
        float[] GLATL = new float[] { -999, -999 };
        float[] GLL = new float[] { -999, -999 };
        float[] STLL = new float[] { -999, -999 };
        float[] FAL = new float[] { -999, -999 };
        float[] FL = new float[] { -999, -999 };
        float[][] APL = new float[2][7];
        float[][] SWL = new float[2][25];
        float[][] SWCL = new float[2][25];

        VTST7() {
            Arrays.fill(APL[0], -999);
            Arrays.fill(SWL[0], -999);
            Arrays.fill(SWCL[0], -999);
            Arrays.fill(APL[1], -999);
            Arrays.fill(SWL[1], -999);
            Arrays.fill(SWCL[1], -999);
        }

        /**
         * Checks if inputs have changed, maybe some sort of caching?
         * 
         * @param IYD
         * @param SEC
         * @param GLAT
         * @param GLONG
         * @param STL
         * @param F107A
         * @param F107
         * @param AP
         * @param IC
         */
        int run(
                int IYD,
                float SEC,
                float GLAT,
                float GLONG,
                float STL,
                float F107A,
                float F107,
                float[] AP, // length 7
                int IC) {

            boolean changed = false;
            if (IYD != IYDL[IC - 1]) {
                changed = true;
                IYD = IYDL[IC - 1];
            }
            if (SEC != SECL[IC - 1]) {
                changed = true;
                SEC = SECL[IC - 1];
            }
            if (GLAT != GLATL[IC - 1]) {
                changed = true;
                GLAT = GLATL[IC - 1];
            }
            if (GLONG != GLL[IC - 1]) {
                changed = true;
                GLONG = GLL[IC - 1];
            }
            if (STL != STLL[IC - 1]) {
                changed = true;
                STL = STLL[IC - 1];
            }
            if (F107A != FAL[IC - 1]) {
                changed = true;
                F107A = FAL[IC - 1];
            }
            if (F107 != FL[IC - 1]) {
                changed = true;
                F107 = FL[IC - 1];
            }
            for (int i = 0; i < 7; i++) {
                if (APL[IC - 1][i] != AP[i]) {
                    changed = true;
                    APL[IC - 1][i] = AP[i];
                }
            }
            for (int i = 0; i < 25; i++) {
                if (SWL[IC - 1][i] != CommonCSW.SW[i]) {
                    changed = true;
                    SWL[IC - 1][i] = CommonCSW.SW[i];
                }
                if (SWCL[IC - 1][i] != CommonCSW.SWC[i]) {
                    changed = true;
                    SWCL[IC - 1][i] = CommonCSW.SWC[i];
                }
            }
            return changed ? 1 : 0;
        }

    }

    class GLATF {

        /**
         * Calculate latitude, variable gravity and effective radius
         * 
         * @param LAT
         * @param gSURF
         * @param rE
         */
        void run(float LAT, float GV, float REFF) {
            float DGTR = 1.74533e-2f;
            float C2 = (float) Math.cos(2f * DGTR * LAT);
            GV = 980.616f * (1f - 0.0026373f * C2);
            REFF = 2f * GV / (3.085462e-6f + 2.27e-9f * C2);
        }

    }
}
